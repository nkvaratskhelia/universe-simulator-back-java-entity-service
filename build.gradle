plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.4.2'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'org.owasp.dependencycheck' version '12.1.0'
    id 'io.freefair.lombok' version '8.12.1'
}

group = 'com.example.universe.simulator'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/nkvaratskhelia/universe-simulator-back-java-common'
        credentials {
            username = System.getenv('US_GITHUB_PACKAGES_USER')
            password = System.getenv('US_GITHUB_PACKAGES_TOKEN')
        }
        metadataSources {
            gradleMetadata()
        }
    }
}

ext {
    set('commonVersion', '3.1.4')
    set('springBootAdminVersion', '3.4.2')
    set('logstashLogbackEncoderVersion', '8.0')
    set('springdocOpenapiVersion', '2.8.5')
    set('graphqlJavaExtendedScalarsVersion', '22.0')
    set('mapstructVersion', '1.6.3')
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2024.0.0'
    }
}

dependencies {
    implementation "com.example.universe.simulator:common:${commonVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarsVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
    runtimeOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-consul-config'
    runtimeOnly 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    // needed for spring cloud load balancer
    runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
    runtimeOnly 'org.liquibase:liquibase-core'
    runtimeOnly "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.springframework.graphql:spring-graphql-test"
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'
    // needed for smoke tests
    testRuntimeOnly 'com.h2database:h2'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

idea {
    module {
        downloadJavadoc = true
    }
}

def coverageExclusions = [
        '**/com/example/universe/simulator/entityservice/EntityServiceApplication.*',
        '**/com/example/universe/simulator/entityservice/config/SchedulingConfig.*',
        '**/com/example/universe/simulator/entityservice/entities/*_.*',
        '**/com/example/universe/simulator/entityservice/mappers/*Impl.*'
]

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'universe-simulator'
        property 'sonar.login', System.getenv('US_SONARQUBE_TOKEN')
        property 'sonar.coverage.exclusions', coverageExclusions
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
}

bootBuildImage {
    imageName = "universesimulator/${project.name}:${System.getenv('GITHUB_RUN_NUMBER')}"
    publish = true
    docker {
        publishRegistry {
            username = System.getenv('US_DOCKER_REGISTRY_USER')
            password = System.getenv('US_DOCKER_REGISTRY_TOKEN')
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusions)
        }))
    }
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusions)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 1
            }
        }
    }
}
